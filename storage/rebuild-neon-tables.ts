import { NeonToolkit } from "@neondatabase/toolkit"
import dotenv from "dotenv"
import path from "path"
import * as crypto from "crypto"

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
dotenv.config({ path: path.join(__dirname, "../.env") })

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –≤ Neon DB
 * –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Instagram Reels
 */
async function rebuildNeonDatabase() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  if (process.env.CONFIRM !== "YES") {
    console.log(
      "\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
    )
    console.log("‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    console.log(
      "‚ö†Ô∏è  –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–π—Ç–µ CONFIRM=YES –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."
    )
    console.log(
      "\n‚õî –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ CONFIRM=YES –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    return
  }

  if (!process.env.NEON_DATABASE_URL) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è NEON_DATABASE_URL")
    process.exit(1)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ –∫ Neon
  const toolkit = new NeonToolkit(process.env.NEON_DATABASE_URL)

  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...")

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesRes = await toolkit.sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `
    const tables = tablesRes.map(r => r.table_name)

    console.log("üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:", tables.join(", ") || "—Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    for (const table of tables) {
      await toolkit.sql`DROP TABLE IF EXISTS ${table} CASCADE`
      console.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ "${table}" —É–¥–∞–ª–µ–Ω–∞`)
    }

    console.log("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...")

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ParsingSources (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–æ–π –∏–∑-–∑–∞ foreign key)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingSources...")
    await toolkit.sql`
      CREATE TABLE ParsingSources (
        id SERIAL PRIMARY KEY,
        identifier TEXT UNIQUE NOT NULL,
        type VARCHAR(50) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        last_parsed_at TIMESTAMPTZ,
        notes TEXT
      )
    `

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ReelsContent
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ReelsContent...")
    await toolkit.sql`
      CREATE TABLE ReelsContent (
        id SERIAL PRIMARY KEY,
        reels_url TEXT UNIQUE NOT NULL,
        publication_date DATE,
        views_count BIGINT,
        likes_count BIGINT,
        comments_count INTEGER,
        description TEXT,
        source_identifier TEXT NOT NULL,
        source_type VARCHAR(50) NOT NULL,
        author_username VARCHAR(255),
        author_id VARCHAR(255),
        audio_title TEXT,
        audio_artist VARCHAR(255),
        raw_data JSONB,
        parsed_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      )
    `

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ParsingLogs
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingLogs...")
    await toolkit.sql`
      CREATE TABLE ParsingLogs (
        id SERIAL PRIMARY KEY,
        run_id UUID NOT NULL,
        source_id INTEGER REFERENCES ParsingSources(id),
        status VARCHAR(50) NOT NULL,
        reels_added_count INTEGER DEFAULT 0,
        errors_encountered_count INTEGER DEFAULT 0,
        start_time TIMESTAMPTZ NOT NULL,
        end_time TIMESTAMPTZ,
        log_message TEXT
      )
    `

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ReelsContent
    await toolkit.sql`CREATE INDEX idx_reelscontent_publication_date ON ReelsContent (publication_date)`
    await toolkit.sql`CREATE INDEX idx_reelscontent_views_count ON ReelsContent (views_count)`
    await toolkit.sql`CREATE INDEX idx_reelscontent_source_type ON ReelsContent (source_type)`
    await toolkit.sql`CREATE INDEX idx_reelscontent_author_username ON ReelsContent (author_username)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ParsingSources
    await toolkit.sql`CREATE INDEX idx_parsingsources_type ON ParsingSources (type)`
    await toolkit.sql`CREATE INDEX idx_parsingsources_active ON ParsingSources (is_active)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ParsingLogs
    await toolkit.sql`CREATE INDEX idx_parsinglogs_run_id ON ParsingLogs (run_id)`
    await toolkit.sql`CREATE INDEX idx_parsinglogs_start_time ON ParsingLogs (start_time)`

    console.log("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∞!")

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")

    const newTablesRes = await toolkit.sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `
    const newTables = newTablesRes.map(r => r.table_name)

    for (const table of newTables) {
      const columnsRes = await toolkit.sql`
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = ${table} 
        ORDER BY ordinal_position
      `

      console.log(`\nüìã –¢–∞–±–ª–∏—Ü–∞: ${table}`)
      columnsRes.forEach(col => {
        console.log(
          `  - ${col.column_name} (${col.data_type})${col.is_nullable === "NO" ? " NOT NULL" : ""}`
        )
      })
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingSources –¥–∞–Ω–Ω—ã–º–∏
    console.log("\nüìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingSources...")

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const accounts = [
      "https://www.instagram.com/clinicajoelleofficial",
      "https://www.instagram.com/kayaclinicarabia/",
      "https://www.instagram.com/lips_for_kiss",
      "https://www.instagram.com/ziedasclinic?igsh=ZTAxeWZhY3VzYml2",
      "https://www.instagram.com/med_yu_med?igsh=YndwbmQzMHlrbTFh",
      "https://www.instagram.com/milena_aesthetic_clinic/",
      "https://www.instagram.com/graise.aesthetics",
    ]

    for (const account of accounts) {
      await toolkit.sql`
        INSERT INTO ParsingSources (identifier, type) 
        VALUES (${account}, 'account')
        ON CONFLICT (identifier) DO NOTHING
      `
      console.log(`  ‚úì –ê–∫–∫–∞—É–Ω—Ç "${account}" –¥–æ–±–∞–≤–ª–µ–Ω`)
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtags = [
      "#—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è–º–µ–¥–∏—Ü–∏–Ω–∞",
      "#—É–≤–µ–ª–∏—á–µ–Ω–∏–µ–≥—É–±",
      "#–≥—É–±—ã–±–æ—Ç–æ–∫—Å",
      "#–∫–æ–Ω—Ç—É—Ä–Ω–∞—è–ø–ª–∞—Å—Ç–∏–∫–∞",
      "#–±–æ—Ç–æ–∫—Å–≥—É–±",
      "#–∏–Ω—ä–µ–∫—Ü–∏–æ–Ω–Ω–∞—è–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
      "#—Ñ–∏–ª–ª–µ—Ä–≥—É–±",
      "#—Ñ–∏–ª–ª–µ—Ä—ã",
      "#–º–µ–∑–æ—Ç–µ—Ä–∞–ø–∏—è–ª–∏—Ü–∞",
      "#–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è–∏–Ω—ä–µ–∫—Ü–∏–æ–Ω–Ω–∞—è",
      "#—Ñ–∏–ª–ª–µ—Ä—ã–≥—É–±",
      "#–±–∏–æ—Ä–µ–≤–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è–ª–∏—Ü–∞",
      "#–±–æ—Ç–æ–∫—Å–º–æ—Ä—â–∏–Ω—ã",
    ]

    for (const hashtag of hashtags) {
      await toolkit.sql`
        INSERT INTO ParsingSources (identifier, type) 
        VALUES (${hashtag}, 'hashtag')
        ON CONFLICT (identifier) DO NOTHING
      `
      console.log(`  ‚úì –•—ç—à—Ç–µ–≥ "${hashtag}" –¥–æ–±–∞–≤–ª–µ–Ω`)
    }

    console.log("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error)
    process.exit(1)
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
rebuildNeonDatabase()
