import { NeonToolkit } from "@neondatabase/toolkit"
import dotenv from "dotenv"
import path from "path"

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, "../.env") })

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
 */
async function testNeonConnection() {
  if (!process.env.NEON_DATABASE_URL) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è NEON_DATABASE_URL")
    process.exit(1)
  }

  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...")
    const toolkit = new NeonToolkit(process.env.NEON_DATABASE_URL)

    // –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const tablesRes = await toolkit.sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `
    const tables = tablesRes.map(r => r.table_name)

    console.log("üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:", tables.join(", ") || "—Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å, –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if (tables.includes("parsingsources")) {
      const sourcesRes = await toolkit.sql`
        SELECT * FROM parsingsources LIMIT 5
      `
      console.log("\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ ParsingSources:")
      console.table(sourcesRes)
    }

    if (tables.includes("reelscontent")) {
      const reelsRes = await toolkit.sql`
        SELECT id, reels_url, publication_date, views_count, source_identifier, source_type 
        FROM reelscontent 
        LIMIT 5
      `
      console.log("\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ ReelsContent:")
      console.table(reelsRes)
    }

    console.log("\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon —É—Å–ø–µ—à–Ω–æ!")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Neon:", error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
testNeonConnection()
