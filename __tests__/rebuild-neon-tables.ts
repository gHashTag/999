import { Client } from "pg"
import dotenv from "dotenv"

dotenv.config()

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü –≤ Neon DB
 * –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Instagram Reels
 */
async function rebuildNeonDatabase() {
  const client = new Client({
    connectionString: process.env.NEON_DATABASE_URL,
    ssl: { rejectUnauthorized: false },
  })

  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...")
    await client.connect()

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesRes = await client.query(
      "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'"
    )
    const tables = tablesRes.rows.map(r => r.table_name)

    console.log("üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:", tables.join(", ") || "—Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    for (const table of tables) {
      await client.query(`DROP TABLE IF EXISTS "${table}" CASCADE`)
      console.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ "${table}" —É–¥–∞–ª–µ–Ω–∞`)
    }

    console.log("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...")

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ParsingSources (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–≤–æ–π –∏–∑-–∑–∞ foreign key)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingSources...")
    await client.query(`
      CREATE TABLE ParsingSources (
        id SERIAL PRIMARY KEY,
        identifier TEXT UNIQUE NOT NULL,
        type VARCHAR(50) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        last_parsed_at TIMESTAMPTZ,
        notes TEXT
      )
    `)

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ReelsContent
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ReelsContent...")
    await client.query(`
      CREATE TABLE ReelsContent (
        id SERIAL PRIMARY KEY,
        reels_url TEXT UNIQUE NOT NULL,
        publication_date DATE,
        views_count BIGINT,
        likes_count BIGINT,
        comments_count INTEGER,
        description TEXT,
        source_identifier TEXT NOT NULL,
        source_type VARCHAR(50) NOT NULL,
        author_username VARCHAR(255),
        author_id VARCHAR(255),
        audio_title TEXT,
        audio_artist VARCHAR(255),
        raw_data JSONB,
        parsed_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      )
    `)

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ParsingLogs
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingLogs...")
    await client.query(`
      CREATE TABLE ParsingLogs (
        id SERIAL PRIMARY KEY,
        run_id UUID NOT NULL,
        source_id INTEGER REFERENCES ParsingSources(id),
        status VARCHAR(50) NOT NULL,
        reels_added_count INTEGER DEFAULT 0,
        errors_encountered_count INTEGER DEFAULT 0,
        start_time TIMESTAMPTZ NOT NULL,
        end_time TIMESTAMPTZ,
        log_message TEXT
      )
    `)

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ReelsContent
    await client.query(
      `CREATE INDEX idx_reelscontent_publication_date ON ReelsContent (publication_date)`
    )
    await client.query(
      `CREATE INDEX idx_reelscontent_views_count ON ReelsContent (views_count)`
    )
    await client.query(
      `CREATE INDEX idx_reelscontent_source_type ON ReelsContent (source_type)`
    )
    await client.query(
      `CREATE INDEX idx_reelscontent_author_username ON ReelsContent (author_username)`
    )

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ParsingSources
    await client.query(
      `CREATE INDEX idx_parsingsources_type ON ParsingSources (type)`
    )
    await client.query(
      `CREATE INDEX idx_parsingsources_active ON ParsingSources (is_active)`
    )

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ParsingLogs
    await client.query(
      `CREATE INDEX idx_parsinglogs_run_id ON ParsingLogs (run_id)`
    )
    await client.query(
      `CREATE INDEX idx_parsinglogs_start_time ON ParsingLogs (start_time)`
    )

    console.log("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∞!")

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")

    const newTablesRes = await client.query(
      "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name"
    )
    const newTables = newTablesRes.rows.map(r => r.table_name)

    for (const table of newTables) {
      const columnsRes = await client.query(
        `
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = $1 
        ORDER BY ordinal_position
      `,
        [table]
      )

      console.log(`\nüìã –¢–∞–±–ª–∏—Ü–∞: ${table}`)
      columnsRes.rows.forEach(col => {
        console.log(
          `  - ${col.column_name} (${col.data_type})${col.is_nullable === "NO" ? " NOT NULL" : ""}`
        )
      })
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error)
    process.exit(1)
  } finally {
    await client.end()
    console.log("\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
  }
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
console.log(
  "\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
)
console.log("‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
console.log(
  "‚ö†Ô∏è  –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–π—Ç–µ CONFIRM=YES –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
)

if (process.argv.includes("CONFIRM=YES")) {
  rebuildNeonDatabase().catch(err => {
    console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", err)
    process.exit(1)
  })
} else {
  console.log("‚õî –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ CONFIRM=YES –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
  process.exit(0)
}
