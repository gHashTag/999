import { inngest } from "@/inngest/client"
import { createContentFactoryAgent } from "@/agents/contentFactory/logic/createContentFactoryAgent"
import type { AgentResult } from "@/types/agents" // Ensure this type is correctly defined and exported
// import { modelos } from "@/utils/openai/modelos" // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç
import { openai } from "@inngest/agent-kit" // Import openai model adapter
import type {
  AgentDependencies,
  BaseLogger,
  SystemEvents,
} from "@/types/agents" // Import necessary types

// –û–±–Ω–æ–≤–ª—è–µ–º ContentFactoryEventTrigger –¥–ª—è MVP
export interface ContentFactoryEventTrigger {
  name: "content.factory.run"
  data: {
    eventId: string
    competitor_urls: string[]
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Reels, –ø–æ–∫–∞ —É–±–∏—Ä–∞–µ–º –∏–ª–∏ –¥–µ–ª–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–ª—è MVP
    // accountsToParse?: string[]
    // hashtagsToParse?: string[]
    // filter_criteria?: Record<string, unknown>
    // ai_generation_rules?: Record<string, unknown>
  }
}

export const contentFactoryWorkflow = inngest.createFunction(
  { id: "content-factory-workflow", name: "Content Factory Workflow" },
  { event: "content.factory.run" as const },
  async ({
    event,
    step,
    logger,
  }: {
    event: ContentFactoryEventTrigger
    step: any
    logger: BaseLogger
  }) => {
    logger.info(
      "üöÄ Content Factory Workflow started for MVP (Profile Parsing)",
      {
        eventData: event.data,
      }
    )

    const mockSystemEvents: SystemEvents = {
      emit: async (eventName: string, payload: Record<string, unknown>) => {
        logger.info(`Mock SystemEvent emitted: ${eventName}`, payload)
      },
    }

    const modelAdapter = openai({
      model: "deepseek/deepseek-coder",
      apiKey: process.env.DEEPSEEK_API_KEY || "MOCK_DEEPSEEK_API_KEY",
    })

    const agentDeps: AgentDependencies = {
      log: logger,
      apiKey: process.env.DEEPSEEK_API_KEY || "MOCK_DEEPSEEK_API_KEY",
      modelName: "deepseek/deepseek-coder",
      systemEvents: mockSystemEvents,
      sandbox: null,
      eventId: event.data.eventId,
      kv: undefined,
      model: modelAdapter,
      tools: [],
    }

    const contentFactoryAgent = createContentFactoryAgent(agentDeps)
    logger.info(
      `ü§ñ ContentFactoryAgent '${contentFactoryAgent.name}' initialized.`
    )

    // –ì–æ—Ç–æ–≤–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ event.data
    const agentInput = {
      competitor_urls: event.data.competitor_urls,
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ event.data, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –∞–≥–µ–Ω—Ç—É
    }

    const agentCallResult: AgentResult = await step.run(
      "run-content-factory-agent-mvp-profile-parsing",
      async () => {
        logger.info("Executing contentFactoryAgent.run with input:", agentInput)
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏:
        // const result = await contentFactoryAgent.run(agentInput)
        // return result

        // –ü–æ–∫–∞ –º–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        // –≠—Ç–æ—Ç –º–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        return {
          output: [
            {
              type: "text",
              content: `Mocked agent output: Processed ${agentInput.competitor_urls.length} competitor profiles. Data saved to Neon DB.`,
            },
          ],
          state: {
            status: "PROFILES_PARSED_AND_SAVED",
            processed_count: agentInput.competitor_urls.length,
            errors: [],
          },
        } as AgentResult
      }
    )

    logger.info("‚úÖ Agent execution for profile parsing completed", {
      agentCallResult,
    })

    if (agentCallResult.state?.status === "PROFILES_PARSED_AND_SAVED") {
      logger.info("Workflow logic for PROFILES_PARSED_AND_SAVED state:", {
        processed_count: agentCallResult.state.processed_count,
      })
      // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä—Å–∏–Ω–≥ Reels –¥–ª—è —ç—Ç–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
    }

    return {
      message: "Content Factory Workflow (MVP - Profile Parsing) executed.",
      finalStatus: agentCallResult.state?.status,
      data: agentCallResult.state,
    }
  }
)
