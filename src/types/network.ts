// import { createNetwork, Agent, type NetworkRun } from "@inngest/agent-kit" // Unused
// import { deepseek } from "@inngest/ai/models" // Unused
// Import Zod for schema definition and the NetworkStatus enum
import { z } from "zod"

// Define the Network Statuses
export const NetworkStatus = z.enum([
  "IDLE", // Default state, maybe unused
  "NEEDS_TEST", // Initial state: Tester needs to write tests/command
  "NEEDS_TEST_REVISION", // Tester needs to revise tests/command based on critique
  // "NEEDS_CODE", // No longer directly needed, command execution handles this
  // "NEEDS_CODE_REVISION", // Revision handled by re-running test generation
  "NEEDS_TEST_CRITIQUE", // Critic needs to review the generated test command/plan
  "NEEDS_COMMAND_EXECUTION", // Handler needs to execute the generated command
  "NEEDS_COMMAND_VERIFICATION", // Critic needs to verify the result of the command (e.g., created file)
  "NEEDS_IMPLEMENTATION_CRITIQUE", // Critic needs to review the implementation created by open-codex
  "NEEDS_IMPLEMENTATION_REVISION", // Tester needs to generate a *new* command to revise implementation
  // "READY_FOR_FINAL_TEST", // We might not have this distinct step now
  // "READY_FOR_COMPLETION", // Critic signals completion
  "COMPLETED", // Final success state
  "FAILED", // Final error state
  "NEEDS_HUMAN_INPUT", // Agent needs input from the user
])
export type NetworkStatus = z.infer<typeof NetworkStatus>

// Define the structure of the state KV store
export const tddNetworkStateSchema = z.object({
  task: z.string(),
  status: NetworkStatus,
  sandboxId: z.string().optional(), // Keep sandboxId in state
  generated_command: z.string().optional(), // Command generated by Tester/Coder
  test_critique: z.string().optional(), // Feedback on tests/command from critic
  implementation_critique: z.string().optional(), // Feedback on code created by open-codex
  last_command_output: z.string().optional(), // Store output from run_terminal_cmd
  // Removed fields: current_code, test_code (handled externally by open-codex)
  // Removed fields: critique (split into specific critiques)
})

// Export the inferred type
export type TddNetworkState = z.infer<typeof tddNetworkStateSchema>
