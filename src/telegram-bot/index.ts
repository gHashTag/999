import { Telegraf, Markup } from "telegraf"
import { message } from "telegraf/filters"
import path from "path"
import {
  initializeNeonStorage,
  closeNeonStorage,
  getUserByTelegramId,
  createUser,
  getProjectsByUserId,
  getCompetitorAccounts,
  getTrackingHashtags,
  getReels,
  scrapeInstagramReels,
  saveReels,
} from "../agents/scraper"
import dotenv from "dotenv"

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN
if (!token) {
  console.error("–û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
  process.exit(1)
}
const bot = new Telegraf(token)

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const start = Date.now()
  await next()
  const ms = Date.now() - start
  console.log(
    `${ctx.from?.username || ctx.from?.id} - ${ctx.updateType}: ${ms}ms`
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async ctx => {
  try {
    await initializeNeonStorage()

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
      user = await createUser(
        ctx.from.id,
        ctx.from.username || undefined,
        ctx.from.first_name || undefined,
        ctx.from.last_name || undefined
      )
    }

    await closeNeonStorage()

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Instagram Reels –≤ –Ω–∏—à–µ —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –°–∫—Ä–∞–ø–∏—Ç—å Reels –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ 
‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –∏ –¥–∞—Ç–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –≤ —É–¥–æ–±–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.`,
      {
        reply_markup: {
          keyboard: [
            ["üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", "üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã"],
            ["üìã –ú–æ–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "üè∑Ô∏è –ú–æ–∏ —Ö—ç—à—Ç–µ–≥–∏"],
            ["üëÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ Reels", "‚ùì –ü–æ–º–æ—â—å"],
          ],
          resize_keyboard: true,
        },
      }
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.help(async ctx => {
  await ctx.reply(
    `*Instagram Reels Scraper Bot*
    
–ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /projects - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ /competitors - –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
‚Ä¢ /hashtags - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤
‚Ä¢ /scrape - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥
‚Ä¢ /reels - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ Reels
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /projects
2. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Ö—ç—à—Ç–µ–≥–∏
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–æ–π /scrape
4. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ /reels`,
    { parse_mode: "Markdown" }
  )
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /projects
bot.command("projects", async ctx => {
  try {
    await initializeNeonStorage()

    const user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      )
      await closeNeonStorage()
      return
    }

    const projects = await getProjectsByUserId(user.id)

    if (!projects || projects.length === 0) {
      await ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data: "create_project" }],
          ],
        },
      })
    } else {
      const projectButtons = projects.map(project => [
        {
          text: `${project.name} (${project.is_active ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"})`,
          callback_data: `project_${project.id}`,
        },
      ])

      projectButtons.push([
        { text: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data: "create_project" },
      ])

      await ctx.reply("–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:", {
        reply_markup: {
          inline_keyboard: projectButtons,
        },
      })
    }

    await closeNeonStorage()
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /competitors
bot.command("competitors", async ctx => {
  try {
    await initializeNeonStorage()

    const user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      )
      await closeNeonStorage()
      return
    }

    const projects = await getProjectsByUserId(user.id)

    if (!projects || projects.length === 0) {
      await ctx.reply(
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /projects"
      )
      await closeNeonStorage()
      return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    if (projects.length === 1) {
      const competitors = await getCompetitorAccounts(projects[0].id)

      if (!competitors || competitors.length === 0) {
        await ctx.reply(
          `–í –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}" –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                    callback_data: `add_competitor_${projects[0].id}`,
                  },
                ],
              ],
            },
          }
        )
      } else {
        const competitorList = competitors
          .map((c, i) => `${i + 1}. [${c.user_name}](${c.instagram_url})`)
          .join("\n")

        await ctx.reply(
          `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}":\n\n${competitorList}`,
          {
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                    callback_data: `add_competitor_${projects[0].id}`,
                  },
                ],
              ],
            },
          }
        )
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
      const projectButtons = projects.map(project => [
        {
          text: project.name,
          callback_data: `competitors_project_${project.id}`,
        },
      ])

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:", {
        reply_markup: {
          inline_keyboard: projectButtons,
        },
      })
    }

    await closeNeonStorage()
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /hashtags
bot.command("hashtags", async ctx => {
  try {
    await initializeNeonStorage()

    const user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      )
      await closeNeonStorage()
      return
    }

    const projects = await getProjectsByUserId(user.id)

    if (!projects || projects.length === 0) {
      await ctx.reply(
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /projects"
      )
      await closeNeonStorage()
      return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏
    if (projects.length === 1) {
      const hashtags = await getTrackingHashtags(projects[0].id)

      if (!hashtags || hashtags.length === 0) {
        await ctx.reply(
          `–í –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}" –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥",
                    callback_data: `add_hashtag_${projects[0].id}`,
                  },
                ],
              ],
            },
          }
        )
      } else {
        const hashtagList = hashtags
          .map((h, i) => `${i + 1}. #${h.name}`)
          .join("\n")

        await ctx.reply(
          `–•—ç—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}":\n\n${hashtagList}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥",
                    callback_data: `add_hashtag_${projects[0].id}`,
                  },
                ],
              ],
            },
          }
        )
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
      const projectButtons = projects.map(project => [
        {
          text: project.name,
          callback_data: `hashtags_project_${project.id}`,
        },
      ])

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö—ç—à—Ç–µ–≥–æ–≤:", {
        reply_markup: {
          inline_keyboard: projectButtons,
        },
      })
    }

    await closeNeonStorage()
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—ç—à—Ç–µ–≥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scrape
bot.command("scrape", async ctx => {
  try {
    await initializeNeonStorage()

    const user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      )
      await closeNeonStorage()
      return
    }

    const projects = await getProjectsByUserId(user.id)

    if (!projects || projects.length === 0) {
      await ctx.reply(
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /projects"
      )
      await closeNeonStorage()
      return
    }

    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    const projectButtons = projects.map(project => [
      {
        text: project.name,
        callback_data: `scrape_project_${project.id}`,
      },
    ])

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:", {
      reply_markup: {
        inline_keyboard: projectButtons,
      },
    })

    await closeNeonStorage()
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–∫—Ä–∞–ø–∏–Ω–≥—É:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–∫—Ä–∞–ø–∏–Ω–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reels
bot.command("reels", async ctx => {
  try {
    await initializeNeonStorage()

    const user = await getUserByTelegramId(ctx.from.id)

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      )
      await closeNeonStorage()
      return
    }

    const projects = await getProjectsByUserId(user.id)

    if (!projects || projects.length === 0) {
      await ctx.reply(
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /projects"
      )
      await closeNeonStorage()
      return
    }

    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    const projectButtons = projects.map(project => [
      {
        text: project.name,
        callback_data: `reels_project_${project.id}`,
      },
    ])

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels:", {
      reply_markup: {
        inline_keyboard: projectButtons,
      },
    })

    await closeNeonStorage()
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Reels:", error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Reels. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
bot.hears("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", ctx =>
  ctx
    .reply("–ó–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∞–ø–∏–Ω–≥", { reply_markup: { remove_keyboard: true } })
    .then(() =>
      bot.telegram.sendMessage(ctx.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–°–∫—Ä–∞–ø–∏–Ω–≥", callback_data: "run_scrape" }],
          ],
        },
      })
    )
)
bot.hears("üìä –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã", ctx =>
  bot.telegram
    .sendMessage(ctx.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    .then(() => {
      if (ctx.chat && ctx.chat.id) {
        return bot.command.projects.trigger(ctx)
      }
    })
)
bot.hears("üìã –ú–æ–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", ctx =>
  bot.telegram
    .sendMessage(ctx.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
    .then(() => {
      if (ctx.chat && ctx.chat.id) {
        return bot.command.competitors.trigger(ctx)
      }
    })
)
bot.hears("üè∑Ô∏è –ú–æ–∏ —Ö—ç—à—Ç–µ–≥–∏", ctx =>
  bot.telegram
    .sendMessage(ctx.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤...")
    .then(() => {
      if (ctx.chat && ctx.chat.id) {
        return bot.command.hashtags.trigger(ctx)
      }
    })
)
bot.hears("üëÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ Reels", ctx =>
  bot.telegram.sendMessage(ctx.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é Reels...").then(() => {
    if (ctx.chat && ctx.chat.id) {
      return bot.command.reels.trigger(ctx)
    }
  })
)
bot.hears("‚ùì –ü–æ–º–æ—â—å", ctx =>
  bot.telegram.sendMessage(ctx.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–∫—É...").then(() => {
    if (ctx.chat && ctx.chat.id) {
      return bot.command.help.trigger(ctx)
    }
  })
)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.action(/project_(\d+)/, async ctx => {
  const projectId = parseInt(ctx.match[1])

  try {
    await initializeNeonStorage()

    // TODO: –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç #${projectId}. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`
    )

    await closeNeonStorage()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`, error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }

  await ctx.answerCbQuery()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
bot.action(/scrape_project_(\d+)/, async ctx => {
  const projectId = parseInt(ctx.match[1])

  try {
    await initializeNeonStorage()

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö –∏ —Ö—ç—à—Ç–µ–≥–∞—Ö
    const competitors = await getCompetitorAccounts(projectId)
    const hashtags = await getTrackingHashtags(projectId)

    if (
      (!competitors || competitors.length === 0) &&
      (!hashtags || hashtags.length === 0)
    ) {
      await ctx.reply(
        "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö—ç—à—Ç–µ–≥–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /competitors –∏–ª–∏ /hashtags"
      )
      await closeNeonStorage()
      return
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const sourceButtons = []

    if (competitors && competitors.length > 0) {
      competitors.forEach(competitor => {
        sourceButtons.push([
          {
            text: `üë§ ${competitor.user_name}`,
            callback_data: `scrape_competitor_${projectId}_${competitor.id}`,
          },
        ])
      })
    }

    if (hashtags && hashtags.length > 0) {
      hashtags.forEach(hashtag => {
        sourceButtons.push([
          {
            text: `#Ô∏è‚É£ ${hashtag.name}`,
            callback_data: `scrape_hashtag_${projectId}_${hashtag.id}`,
          },
        ])
      })
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    sourceButtons.push([
      {
        text: "üîÑ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
        callback_data: `scrape_all_${projectId}`,
      },
    ])

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:", {
      reply_markup: {
        inline_keyboard: sourceButtons,
      },
    })

    await closeNeonStorage()
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–∫—Ä–∞–ø–∏–Ω–≥—É –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    )
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–∫—Ä–∞–ø–∏–Ω–≥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }

  await ctx.answerCbQuery()
})

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
bot.action(/scrape_competitor_(\d+)_(\d+)/, async ctx => {
  const projectId = parseInt(ctx.match[1])
  const competitorId = parseInt(ctx.match[2])

  try {
    await initializeNeonStorage()

    const competitors = await getCompetitorAccounts(projectId)
    const competitor = competitors.find(c => c.id === competitorId)

    if (!competitor) {
      await ctx.reply("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
      await closeNeonStorage()
      return
    }

    await ctx.reply(`–ù–∞—á–∏–Ω–∞—é —Å–∫—Ä–∞–ø–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ ${competitor.user_name}...`)

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    const reels = await scrapeInstagramReels(competitor.instagram_url, {
      apifyToken: process.env.APIFY_TOKEN || "",
      minViews: parseInt(process.env.MIN_VIEWS || "50000"),
      maxAgeDays: parseInt(process.env.MAX_AGE_DAYS || "14"),
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const savedCount = await saveReels(
      reels,
      projectId,
      "competitor",
      competitorId
    )

    await ctx.reply(
      `‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ù–∞–π–¥–µ–Ω–æ Reels: ${reels.length}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: ${savedCount}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                callback_data: `show_reels_${projectId}`,
              },
            ],
          ],
        },
      }
    )

    await closeNeonStorage()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ ${competitorId}:`, error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }

  await ctx.answerCbQuery()
})

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–∞
bot.action(/scrape_hashtag_(\d+)_(\d+)/, async ctx => {
  const projectId = parseInt(ctx.match[1])
  const hashtagId = parseInt(ctx.match[2])

  try {
    await initializeNeonStorage()

    const hashtags = await getTrackingHashtags(projectId)
    const hashtag = hashtags.find(h => h.id === hashtagId)

    if (!hashtag) {
      await ctx.reply("–•—ç—à—Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
      await closeNeonStorage()
      return
    }

    await ctx.reply(`–ù–∞—á–∏–Ω–∞—é —Å–∫—Ä–∞–ø–∏–Ω–≥ —Ö—ç—à—Ç–µ–≥–∞ #${hashtag.name}...`)

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    const reels = await scrapeInstagramReels(
      `https://www.instagram.com/explore/tags/${hashtag.name}/`,
      {
        apifyToken: process.env.APIFY_TOKEN || "",
        minViews: parseInt(process.env.MIN_VIEWS || "50000"),
        maxAgeDays: parseInt(process.env.MAX_AGE_DAYS || "14"),
      }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const savedCount = await saveReels(reels, projectId, "hashtag", hashtagId)

    await ctx.reply(
      `‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ù–∞–π–¥–µ–Ω–æ Reels: ${reels.length}\n–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: ${savedCount}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                callback_data: `show_reels_${projectId}`,
              },
            ],
          ],
        },
      }
    )

    await closeNeonStorage()
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Ö—ç—à—Ç–µ–≥–∞ ${hashtagId}:`, error)
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }

  await ctx.answerCbQuery()
})

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
bot.action(/show_reels_(\d+)/, async ctx => {
  const projectId = parseInt(ctx.match[1])

  try {
    await initializeNeonStorage()

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5)
    const result = await getReels(projectId, { limit: 5 })
    const reels = result.reels

    if (!reels || reels.length === 0) {
      await ctx.reply("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Reels")
    } else {
      await ctx.reply(`–ù–∞–π–¥–µ–Ω–æ ${reels.length} Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:`)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º Reels
      for (const reel of reels) {
        await ctx.reply(
          `üì± *Instagram Reel*\n\n` +
            `üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${reel.views_count}\n` +
            `‚ù§Ô∏è –õ–∞–π–∫–∏: ${reel.likes_count || "N/A"}\n` +
            `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${reel.comments_count || "N/A"}\n` +
            `üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${new Date(reel.publication_date).toLocaleDateString()}\n\n` +
            `${reel.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${reel.description.substring(0, 100)}${reel.description.length > 100 ? "..." : ""}\n\n` : ""}` +
            `[–û—Ç–∫—Ä—ã—Ç—å –≤ Instagram](${reel.reels_url})`,
          {
            parse_mode: "Markdown",
            disable_web_page_preview: false as any,
          }
        )
      }

      await ctx.reply("–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ?", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ",
                callback_data: `more_reels_${projectId}_5`,
              },
            ],
          ],
        },
      })
    }

    await closeNeonStorage()
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    )
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )
    await closeNeonStorage()
  }

  await ctx.answerCbQuery()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on(message("text"), async ctx => {
  await ctx.reply(
    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
  )
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    console.log("–¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    console.log(
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${process.env.MIN_VIEWS || "50000"}`
    )
    console.log(
      `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç Reels: ${process.env.MAX_AGE_DAYS || "14"} –¥–Ω–µ–π`
    )
  })
  .catch(err => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err)
  })

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once("SIGINT", () => bot.stop("SIGINT"))
process.once("SIGTERM", () => bot.stop("SIGTERM"))

export default bot
