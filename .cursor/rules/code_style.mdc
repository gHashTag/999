---
description: 
globs: 
alwaysApply: true
---
# Code Style Rules üé®

## Language Rules üåê

1. Comments Language
   - All code comments MUST be in English
   - Exception: User-facing text strings can be in Russian/English
   - Documentation in markdown files can be bilingual

2. Variable Naming üìù
   - Use English for all variable, function, and class names
   - Follow camelCase for variables and functions
   - Follow PascalCase for classes and interfaces
   - Use UPPER_SNAKE_CASE for constants

3. File Structure üìÇ
   - Use English for file and directory names
   - Follow kebab-case for file names
   - **Exception:** The primary test directory MUST be named `__tests__`.
   - Group related files in descriptive directories
   - **Strict Directory Structure:**
     - Each directory (e.g., `src/feature`) MUST contain an `index.ts` file for exporting public APIs and a `README.md` for documentation.
     - All other source files (`.ts`, `.tsx`, etc.) MUST reside within logical subdirectories (e.g., `src/feature/logic`, `src/feature/utils`, `src/feature/components`).
     - No loose source files should exist directly within a feature directory alongside `index.ts`.
     - **Exception:** Directories acting as logical groupings of related files (e.g., `src/types` containing `agents.ts`, `events.ts`, `network.ts`) are permitted, provided they maintain internal consistency and don't mix implementation logic with type definitions directly.

## Comment Style üí≠

1. Function Comments
   ```typescript
   /**
    * Description of what the function does
    * @param {Type} paramName - Parameter description
    * @returns {Type} Description of return value
    */
   ```

2. Class Comments
   ```typescript
   /**
    * Description of what the class represents
    * @class
    */
   ```

3. Interface Comments
   ```typescript
   /**
    * Description of what the interface represents
    * @interface
    */
   ```

4. Variable Comments
   ```typescript
   // Single line description of the variable's purpose
   ```

## Code Organization üìã

1. Import Order
   - Node.js built-in modules
   - External dependencies
   - Internal modules (@/ imports)
   - Relative imports (./ imports)

2. Function Order
   - Public methods first
   - Private methods last
   - Group related functions together

3. Type Definitions
   - Place types/interfaces at the top of file
   - Group related types together

## Error Messages üö®

1. Language Rules
   - User-facing errors: Both Russian and English
   - Log messages: English with emoji
   - Debug messages: English only

2. Format
   ```typescript
   logger.error({
     message: '‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
     description: 'Error description in English',
     // ... additional context
   })
   ```

## Review and Update üîÑ

- **Continuous Review:** These code style rules are living guidelines. As new patterns emerge or the project evolves, these rules should be reviewed and updated.
- **Proposing Changes:** If you identify a need for a new rule or modification of an existing one, please discuss it and propose changes (e.g., via PR to this file).
