---
description: 
globs: 
alwaysApply: true
---
# Git Branching Workflow Guidelines

To ensure project stability and facilitate collaboration, we adhere to the following Git branching strategy:

1.  **`main` Branch is Sacred:** The `main` branch represents the stable, production-ready state of the codebase. Direct pushes to `main` are strictly forbidden. üö´
2.  **Feature Branches:** All new features, bug fixes, or significant changes must be developed in separate branches.
    *   Branch names should be descriptive (e.g., `feat/add-user-auth`, `fix/login-bug`, `refactor/database-schema`).
    *   Create branches from the latest `main`.
3.  **Commits:** Make small, logical commits within your feature branch. Write clear commit messages.
4.  **Pull Requests (PRs):** Once development on a feature branch is complete and tested:
    *   Ensure your branch is up-to-date with `main` (rebase or merge `main` into your branch if necessary).
    *   Create a Pull Request (PR) to merge your feature branch into `main`.
    *   Clearly describe the changes in the PR description.
    *   Assign reviewers if applicable.
5.  **Merging:** PRs should only be merged into `main` after successful testing and review (if applicable).
6.  **Rollbacks:** This workflow allows easy rollbacks by reverting merges or checking out previous stable states of `main` if needed.

This discipline helps maintain a clean history, prevents breaking the main codebase, and allows for parallel development. üôè

# Core Technologies & Context

*   **Primary LLM:** We are currently using the **DeepSeek Coder** model via the [DeepSeek API](mdc:https:/platform.deepseek.com). Ensure `DEEPSEEK_API_KEY` is set in the environment.
*   **Sandboxing:** Code execution for agents is handled by [E2B Code Interpreter](mdc:https:/e2b.dev) sandboxes. Ensure `E2B_API_KEY` is set.
*   **Framework:** We are experimenting within the `examples/node` directory, utilizing `@inngest/agent-kit` and the Inngest framework.
